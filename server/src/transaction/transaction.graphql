scalar Date

type Transaction {
  id: String!
  amount: Float!
  description: String
  type: String!
  transactionDate: Date!
  userId: String!
  user: User!
  createdAt: String!
  updatedAt: String
}

input CreateTransactionInput {
  amount: Float!
  description: String!
  type: String!
  transactionDate: String!
}

input UpdateTransactionInput {
  id: String!
  amount: Float!
  description: String!
  type: String!
  transactionDate: String!
}

input SelectTransactionInput {
  from: String
  to: String
}

type Transactions {
  totalRevenue: Float!
  totalExpense: Float!
  totalBalance: Float!
  transactions: [Transaction]
}

type Query {
  transactions(selectTransactionInput: SelectTransactionInput): Transactions
  transaction(id: String!): Transaction
}

type Mutation {
  createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
  updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
  removeTransaction(id: String!): Transaction
}
